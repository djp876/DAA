/* 5. Given a schedule containing arrival and departure time of trains in a station, find minimum number

of platforms needed in the station so to avoid any delay in arrival of any train. (Similar to merge of merge sort)*/

#include <stdio.h>

int main()

{

    int a[10],d[10],i,n,mp,np,j;

    printf("enter arrival times of train");

    for(i=1;i<=6;i++)

    scanf("%d",&a[i]);

    for(i=1;i<=6;i++)

    scanf("%d",&d[i]);

    mp=1;

    np=1;

for(j=1,i=j+1;i<=6&&j<=6;)

if(a[i]<d[j])

{

    mp++;

    if(np<mp)

    np=mp;

    i++;

}

else

{

mp--;

    j++;

}

printf("no. of platforms required %d",np);

    return 0;

}


6.

#include<stdio.h>

int max(int,int);

int countPlatforms(int n,int arr[],int dep[])

{

    int ans=1;

    for(int i=0;i<=n-1;i++)

    {

        int count=1;

        for(int j=i+1;j<=n-1;j++)

        {

            if((arr[i]>=arr[j] && arr[i]<=dep[j]) ||

           (arr[j]>=arr[i] && arr[j]<=dep[i]))

           {

               count++;

           }

        }

        ans=max(ans,count);

    }

    return ans;

}

int max(int ans,int count)

{

return (ans>count)?ans:count;

}

int main()

{

    int arr[]={900,940,950,1100,1500,1800};

    int dep[]={910,1200,1120,1130,1900,2000};

    int n=sizeof(dep)/sizeof(dep[0]);

    printf("Minimum number of Platforms required: %d\n",countPlatforms(n,arr,dep));

}
